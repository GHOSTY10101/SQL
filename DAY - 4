-- Create and Use Database
CREATE DATABASE amazon;
USE amazon;

-- Create 'products' Table
CREATE TABLE products (
    pid INT(3) PRIMARY KEY,
    pname VARCHAR(50) NOT NULL,
    price INT(10) NOT NULL,
    stock INT(5),
    location VARCHAR(30) CHECK(location IN ('Mumbai', 'Delhi'))
);

-- Create 'customer' Table
CREATE TABLE customer (
    cid INT(3) PRIMARY KEY,
    cname VARCHAR(30) NOT NULL,
    age INT(3),
    addr VARCHAR(50)
);

-- Create 'orders' Table
CREATE TABLE orders (
    oid INT(3) PRIMARY KEY,
    cid INT(3),
    pid INT(3),
    amt INT(10) NOT NULL,
    FOREIGN KEY(cid) REFERENCES customer(cid),
    FOREIGN KEY(pid) REFERENCES products(pid)
);

-- Create 'payment' Table
CREATE TABLE payment (
    pay_id INT(3) PRIMARY KEY,
    oid INT(3),
    amount INT(10) NOT NULL,
    mode VARCHAR(30) CHECK(mode IN('upi', 'credit', 'debit')),
    status VARCHAR(30),
    FOREIGN KEY(oid) REFERENCES orders(oid)
);
ALTER TABLE payment ADD COLUMN timestamp TIMESTAMP;

-- Insert Data into 'products' Table
INSERT INTO products VALUES
(1, 'HP Laptop', 50000, 15, 'Mumbai'),
(2, 'Realme Mobile', 20000, 30, 'Delhi'),
(3, 'Boat Earpods', 3000, 50, 'Delhi'),
(4, 'Lenovo Laptop', 40000, 15, 'Mumbai'),
(5, 'Charger', 1000, 0, 'Mumbai'),
(6, 'MacBook', 78000, 6, 'Delhi'),
(7, 'JBL Speaker', 6000, 2, 'Delhi'),
(8, 'Asus Laptop', 50000, 15, 'Delhi');

-- Insert Data into 'customer' Table
INSERT INTO customer VALUES
(101, 'Ravi', 30, 'Mumbai'),
(102, 'Rahul', 25, 'Delhi'),
(103, 'Simran', 32, 'Mumbai'),
(104, 'Purvesh', 28, 'Delhi'),
(105, 'Sanjana', 22, 'Mumbai');

-- Insert Data into 'orders' Table
INSERT INTO orders VALUES
(10001, 102, 3, 2700),
(10002, 104, 2, 18000),
(10003, 105, 5, 900),
(10004, 101, 1, 46000);

-- Insert Data into 'payment' Table
INSERT INTO payment VALUES
(1, 10001, 2700, 'upi', 'completed'),
(2, 10002, 18000, 'credit', 'completed'),
(3, 10003, 900, 'debit', 'in process');

-- Update Payment Timestamps
UPDATE payment SET timestamp = '2024-05-01 08:00:00' WHERE pay_id = 1;
UPDATE payment SET timestamp = '2024-05-01 08:10:00' WHERE pay_id = 2;
UPDATE payment SET timestamp = '2024-05-01 08:15:00' WHERE pay_id = 3;

-- SUBQUERIES

-- Single Row Subqueries
-- Example 1: Find the customer who placed the order with the highest amount
SELECT cname 
FROM customer 
WHERE cid = (SELECT cid FROM orders ORDER BY amt DESC LIMIT 1);

-- Example 2: Find the product with the highest price
SELECT pname 
FROM products 
WHERE price = (SELECT MAX(price) FROM products);

-- Multiple-Row Subqueries
-- Example 1: Find all customers who have placed an order
SELECT cname 
FROM customer 
WHERE cid IN (SELECT cid FROM orders);

-- Example 2: Find all customers who have placed an order for a product from Mumbai
SELECT cname 
FROM customer 
WHERE cid IN (SELECT cid FROM orders WHERE pid IN (SELECT pid FROM products WHERE location = 'Mumbai'));

-- Correlated Subqueries
-- Example 1: Products with Price Higher than Location Average
SELECT pname, price 
FROM products p 
WHERE price > (SELECT AVG(price) FROM products WHERE location = p.location);

-- Example 2: Customers with Orders Exceeding Average Order Amount
SELECT cname 
FROM customer c 
WHERE EXISTS (SELECT 1 FROM orders o WHERE o.cid = c.cid GROUP BY o.cid HAVING AVG(o.amt) > (SELECT AVG(amt) FROM orders));

-- JOINS

-- Inner Join with Subquery
-- Example: Retrieve products with their corresponding orders where the product price is greater than 1000
SELECT p.pname, o.oid, o.amt
FROM products p
INNER JOIN (SELECT * FROM orders) o ON p.pid = o.pid
WHERE p.price > 1000;

-- Left Join with Aggregate Functions
-- Example: Retrieve all products and their total orders' amounts, even if there are no orders
SELECT p.pname, SUM(o.amt) AS total_orders_amount
FROM products p
LEFT JOIN orders o ON p.pid = o.pid
GROUP BY p.pname;

-- Right Join with Date and Time Functions
-- Example: Retrieve all orders and their corresponding payment status and timestamp, even if there is no payment record
SELECT o.oid, o.amt, p.status, p.timestamp
FROM orders o
RIGHT JOIN payment p ON o.oid = p.oid;

-- ANALYTICS FUNCTIONS / ADVANCED FUNCTIONS

-- RANK
-- Example: Display rank of products based on price using RANK() function
SELECT pid, pname, price, RANK() OVER (ORDER BY price DESC) AS price_rank
FROM products;

-- DENSE_RANK
-- Example: Display rank of products based on price using DENSE_RANK() function
SELECT pid, pname, price, DENSE_RANK() OVER (ORDER BY price DESC) AS price_rank
FROM products;

-- ROW_NUMBER
-- Example: Find unique row number of the customer table using ROW_NUMBER() function
SELECT ROW_NUMBER() OVER (ORDER BY age DESC) AS row_num, cid, cname, age, addr
FROM customer;

-- CUME_DIST
-- Example: Find cumulative distribution of payment done based on amount spent
SELECT oid, amount, CUME_DIST() OVER (ORDER BY amount) AS cumulative_distribution
FROM payment;

-- LAG
-- Example: Find LAG of price from products table
SELECT pname, price, location, LAG(price) OVER (PARTITION BY location ORDER BY price) AS lag_price
FROM products;

-- LEAD
-- Example: Find LEAD price of the products from products table
SELECT pname, price, location, LEAD(price) OVER (PARTITION BY location ORDER BY price) AS lead_price
FROM products;
