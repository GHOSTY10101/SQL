-- DELIMITER COMMAND:
-- Used to change the statement delimiter when defining multi-statement constructs.
-- Example:
DELIMITER //
CREATE PROCEDURE example_procedure()
BEGIN
    -- SQL statements
END //
DELIMITER ;

-- DETERMINISTIC:
-- Indicates that a function returns the same result for the same input values.
-- Example:
CREATE FUNCTION example_function() RETURNS INT DETERMINISTIC
BEGIN
    RETURN 1;
END;

-- PROCEDURES:
-- A set of SQL statements saved and reused.
-- Example:
DELIMITER //
CREATE PROCEDURE select_all_products()
BEGIN
    SELECT * FROM products;
END //
DELIMITER ;

-- EXECUTING PROCEDURES:
-- Using CALL statement to execute procedures.
-- Example:
CALL select_all_products();

-- DROPPING PROCEDURES:
-- Removing an existing procedure.
-- Example:
DROP PROCEDURE select_all_products;

-- FUNCTIONS:
-- A reusable block of code that performs a specific task and returns a value.
-- Example:
DELIMITER $$
CREATE FUNCTION get_total_revenue() RETURNS INT DETERMINISTIC
BEGIN
    DECLARE total_revenue INT;
    SELECT SUM(p.amount) INTO total_revenue FROM payment p
    INNER JOIN orders o ON p.oid = o.oid WHERE p.status = 'completed';
    RETURN total_revenue;
END$$
DELIMITER ;

-- FUNCTION EXECUTION:
-- Using SELECT statement to call functions.
-- Example:
SELECT get_total_revenue();

-- DROPPING FUNCTION:
-- Removing an existing function.
-- Example:
DROP FUNCTION IF EXISTS get_total_revenue;

-- IN PARAMETERS IN PROCEDURES:
-- Passing values into procedures.
-- Example:
DELIMITER //
CREATE PROCEDURE get_product_details(IN product_id INT)
BEGIN
    SELECT * FROM products WHERE pid = product_id;
END //
DELIMITER ;

-- Calling Procedure:
CALL get_product_details(1);

-- OUT PARAMETERS IN PROCEDURES:
-- Returning values from procedures.
-- Example:
DELIMITER //
CREATE PROCEDURE get_product_count(OUT product_count INT)
BEGIN
    SELECT COUNT(*) INTO product_count FROM products;
END //
DELIMITER ;

-- Calling OUT Procedure:
CALL get_product_count(@product_count);
SELECT @product_count AS product_count;

-- CURSORS:
-- Used to retrieve and process rows one by one.
-- Example:
DELIMITER //
CREATE PROCEDURE print_product_names()
BEGIN
    DECLARE product_name VARCHAR(100);
    DECLARE done INT DEFAULT FALSE;
    DECLARE product_cursor CURSOR FOR SELECT name FROM products;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN product_cursor;
    get_names: LOOP
        FETCH product_cursor INTO product_name;
        IF done THEN
            LEAVE get_names;
        END IF;
        SELECT product_name;
    END LOOP get_names;
    CLOSE product_cursor;
END //
DELIMITER ;

-- PRACTICE QUESTIONS:

-- 1. PROCEDURES

-- Q1. Create a function to calculate total revenue from 'orders' and 'payment' tables for completed orders and call the function.
DELIMITER $$
CREATE FUNCTION get_total_revenue() RETURNS DECIMAL(10,2) DETERMINISTIC
BEGIN
    DECLARE total_revenue DECIMAL(10,2);
    SELECT SUM(p.amount) INTO total_revenue FROM payment p
    INNER JOIN orders o ON p.order_id = o.order_id WHERE o.status = 'Completed';
    RETURN total_revenue;
END$$
DELIMITER ;

SELECT get_total_revenue();

-- Q2. Create a procedure with an IN parameter to retrieve product details based on product ID and call the procedure for product ID 5.
DELIMITER $$
CREATE PROCEDURE get_product_details(IN product_id INT)
BEGIN
    SELECT * FROM products WHERE product_id = product_id;
END$$
DELIMITER ;

CALL get_product_details(5);

-- Q3. Create a procedure with an OUT parameter to get the count of products, store it in a variable, and select the variable to display the count.
DELIMITER $$
CREATE PROCEDURE get_product_count(OUT total_count INT)
BEGIN
    SELECT COUNT(*) INTO total_count FROM products;
END$$
DELIMITER ;

CALL get_product_count(@count);
SELECT @count AS total_products;

-- Q4. Use the predefined SUM() cursor to calculate the total price of all products where category is 'Electronics'.
DELIMITER $$
CREATE PROCEDURE calc_total_electronics_price(OUT total_price DECIMAL(10,2))
BEGIN
    SELECT SUM(price) INTO total_price FROM products WHERE category = 'Electronics';
END$$
DELIMITER ;

CALL calc_total_electronics_price(@total);
SELECT @total AS total_electronics_price;

-- Q5. Declare and use a cursor to iterate through the 'products' table and print the product name for each product.
DELIMITER //
CREATE PROCEDURE print_product_names()
BEGIN
    DECLARE product_name VARCHAR(100);
    DECLARE done INT DEFAULT FALSE;
    DECLARE product_cursor CURSOR FOR SELECT name FROM products;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN product_cursor;
    get_names: LOOP
        FETCH product_cursor INTO product_name;
        IF done THEN
            LEAVE get_names;
        END IF;
        SELECT product_name;
    END LOOP get_names;
    CLOSE product_cursor;
END //
DELIMITER ;
